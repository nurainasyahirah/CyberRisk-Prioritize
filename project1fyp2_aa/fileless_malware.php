<?php
session_start();
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit;
}
include 'navbar.php';
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fileless Malware - Cyber Risk Prioritization System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background-image: url('pixelcut-export (1).jpeg'); /* Replace with your image path */
            background-size: cover;
            background-attachment: fixed;
            color: #fff;
        }
        .container {
            background: rgba(0, 0, 0, 0.8);
            padding: 30px;
            border-radius: 10px;
        }
        h2 {
            color: #ffc107;
        }
        .section {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="text-center">Fileless Malware</h1>
        <p class="text-center">
            Fileless malware is a type of malicious code that doesnâ€™t rely on traditional executable files. Instead, it resides in memory or exploits legitimate programs to evade detection and execute malicious actions.
        </p>

        <h2>Key Characteristics of Fileless Malware</h2>
        <div class="section">
            <p><strong>Fileless Nature:</strong> Operates entirely in memory, making it hard to trace.</p>
            <p><strong>Uses Legitimate Tools:</strong> Often hijacks system tools like PowerShell and WMI.</p>
            <p><strong>Stealth and Evasion:</strong> Leaves little evidence on disk, bypassing traditional defenses.</p>
            <p><strong>Persistence:</strong> Can re-execute with each session, avoiding traditional installation.</p>
        </div>

        <h2>How Fileless Malware Works</h2>
        <div class="section">
            <p><strong>Initial Infection:</strong> Entry via phishing, malicious links, or exploited vulnerabilities.</p>
            <p><strong>Code Injection:</strong> Injected into the memory of legitimate processes like PowerShell.</p>
            <p><strong>Execution:</strong> Runs in memory, enabling data theft, surveillance, or privilege escalation.</p>
            <p><strong>Persistence:</strong> May use registry entries or scheduled tasks to remain active.</p>
        </div>

        <h2>Common Techniques Used in Fileless Malware</h2>
        <div class="section">
            <ul>
                <li><strong>PowerShell Abuse:</strong> Executes commands and downloads payloads via scripts.</li>
                <li><strong>WMI Manipulation:</strong> Uses system management tools for data access and lateral movement.</li>
                <li><strong>Registry Manipulation:</strong> Stores code in registry entries for continuous memory injection.</li>
                <li><strong>Macros in Office Documents:</strong> Executes embedded code when documents are opened.</li>
                <li><strong>Remote Shells:</strong> Commands run directly in memory, avoiding file creation.</li>
            </ul>
        </div>

        <h2>Impact of Fileless Malware</h2>
        <div class="section">
            <p><strong>Data Theft:</strong> Commonly used to steal sensitive data, including credentials and financial information.</p>
            <p><strong>Resource Hijacking:</strong> Can hijack system resources for cryptojacking or other resource-intensive activities.</p>
            <p><strong>Network Spreading:</strong> May move laterally across a network, compromising multiple systems.</p>
            <p><strong>Operational Disruption:</strong> Can disrupt operations by overloading system resources or corrupting data.</p>
        </div>

        <h2>Detection Challenges</h2>
        <div class="section">
            <p><strong>Unusual Process Activity:</strong> Legitimate processes, like PowerShell, may execute unexpected commands.</p>
            <p><strong>High Memory Usage:</strong> Increased memory or CPU usage without a clear cause.</p>
            <p><strong>Anomalies in Event Logs:</strong> Unusual or unauthorized entries in system logs.</p>
        </div>

        <h2>How to Protect Against Fileless Malware</h2>
        <div class="section">
            <p><strong>Use Endpoint Detection and Response (EDR):</strong> EDR monitors memory and processes for real-time detection of unusual activity.</p>
            <p><strong>Limit PowerShell and WMI Usage:</strong> Restrict access and disable macros in Office files.</p>
            <p><strong>Employ Application Whitelisting:</strong> Allow only pre-approved applications to run on your system.</p>
            <p><strong>Regular Patch Management:</strong> Keep systems updated to prevent exploits of unpatched vulnerabilities.</p>
            <p><strong>Educate Employees on Phishing:</strong> Awareness can help prevent initial infections from phishing.</p>
            <p><strong>Monitor Network Traffic:</strong> Look for unusual outbound traffic that could indicate infection.</p>
        </div>

        <!-- Additional Information and Reference Link -->
        <p class="mt-4">
            Fileless malware is a stealthy threat that exploits legitimate tools for malicious purposes. For more information, visit <a href="https://www.cisa.gov/uscert/ncas/tips/ST18-001" target="_blank" class="text-warning">CISA's Guide on Fileless Malware</a>.
        </p>

        <!-- Back Button -->
        <div class="text-center mt-4">
            <a href="education.php" class="btn btn-warning">Back to Educational Components</a>
        </div>
    </div>

    <?php include 'footer.php'; ?>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
</body>
</html>
